import logging
from PIL import Image
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from keyboards import for_index, for_createPattern
from filters.states import PatternCreate
from aiogram.fsm.context import FSMContext
import io

router = Router(name=__name__)


@router.callback_query(F.data == "createPattern")
async def create_pattern(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://i.imgur.com/pqpa6qz.jpeg',
        caption='<b>üî• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω —Å—Ç–∏–∫–µ—Ä–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –ª–∏—Ü–æ</b>\n\n‚ùóÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 512x512 –ø–∏–∫—Å',
        reply_markup=for_index.go_home()
    )
    await state.set_state(PatternCreate.image)
    await state.update_data({'images': []})


@router.message(PatternCreate.image, F.photo)
async def account_get_username(message: Message, state: FSMContext, settings: dict):
    if message.photo[-1].width < 512 or message.photo[-1].height < 512:
        await message.answer_photo(
            photo='https://imgur.com/ULa3EE5',
            caption='<b>‚ùå –û–®–ò–ë–ö–ê:</b> –í–∞—à–µ —Ñ–æ—Ç–æ –º–µ–Ω—å—à–µ —á–µ–º 512x512 –ø–∏–∫—Å!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
            reply_markup=for_index.go_home()
        )
        return

    data = await state.get_data()
    data['images'] += [message.photo[-1].file_id]
    await state.update_data(data)

    if len(data['images']) >= settings.max_images_pattern:
        await message.answer_photo(
            photo='https://i.imgur.com/mztr2yf.jpeg',
            caption='<b>‚ö°Ô∏è –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:</b>',
            reply_markup=for_index.go_home()
        )
        await state.set_state(PatternCreate.title)
    else:
        await message.answer_photo(
            photo='https://i.imgur.com/4yGp1T4.jpeg',
            caption=f'<code>üñº {len(data["images"])}/{settings.max_images_pattern}</code>\n\n‚ùóÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 512x512 –ø–∏–∫—Å',
            reply_markup=for_createPattern.get_images()
        )


@router.callback_query(F.data == "createPattern|getName")
async def create_pattern(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer_photo(
        photo='https://i.imgur.com/mztr2yf.jpeg',
        caption='<b>‚ö°Ô∏è –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:</b>',
        reply_markup=for_index.go_home()
    )
    await state.set_state(PatternCreate.title)


@router.message(PatternCreate.title)
async def account_get_username(message: Message, state: FSMContext, bot: Bot):
    if len(message.text) > 50:
        await message.answer('<b>‚ùå –û—à–∏–±–∫–∞:</b> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è 50 —Å–∏–º–≤–æ–ª–æ–≤')
        return

    msg = await message.answer_photo(
        photo='https://i.imgur.com/8epdsdY.png',
        caption='<b>üêë –ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ —à–∞–±–ª–æ–Ω–∞</b>',
    )

    # TODO: –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é
    logging.info('Downloading images')

    data = await state.get_data()
    images_buffer = []

    for image_id in data['images']:
        file = await bot.get_file(image_id)
        image_in_memory = io.BytesIO()
        await bot.download_file(file.file_path, destination=image_in_memory)
        images_buffer.append(image_in_memory)

    logging.info('Resizing images')

    for buffer in images_buffer:
        img = Image.open(buffer)
        img = img.convert('RGB')
        img = img.resize((512, 512))
        img.save(buffer, 'WEBP')
        img.save('tmp.WEBP', 'WEBP')

    logging.info('Sending images')



    await msg.delete()
    await message.answer_photo(
        photo='https://i.imgur.com/uF15JYE.jpeg',
        caption='<b>‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω</b>\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à —à–∞–±–ª–æ–Ω: t.me/MemeSwap_robot?pattern=98034',
        reply_markup=for_createPattern.successfully(share_url='t.me/MemeSwap_robot?pattern=98034')
    )
    await state.clear()
